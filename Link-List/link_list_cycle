#include<iostream>
using namespace std;

struct ListNode{
    int val;
    ListNode* next;
    ListNode(int x):val(x),next(NULL){}
};

bool hasCycle(ListNode* head)
{
    if(!head || !head->next)
    return false;

    ListNode* slow = head;
    ListNode* fast = head;
    while(fast && fast->next)
    {
        slow= slow->next;       //speed 1x
        fast= fast->next->next; //speed 2x


        if(slow == fast)       //cycle found
        return true;
    }
    return false;
}

int main(){
    ListNode* head = new ListNode(1);
    head->next = new ListNode(2);
    head->next->next = new ListNode(3);
    head->next->next->next = new ListNode(4);

    head->next->next->next->next = head->next;
    if(hasCycle(head))
    cout<<"cycle detected"<<endl;

    else
    cout<<"failed to detect cycle"<<endl;


    return 0;

}

